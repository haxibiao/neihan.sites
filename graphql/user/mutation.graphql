extend type Mutation @group(namespace: "App") {
  signIn(account: String, email: String, password: String!,uuid:String): User!
    @field(resolver: "User@signIn")
  signOut(user_id: ID!): User @field(resolver: "User@signOut")
  autoSignIn(uuid: String!, phone: String): User
    @field(resolver: "User@autoSignIn")
  destoryUser: Boolean @field(resolver: "User@destoryUserByToken")
  newUserReword(type:RewardType!): Int @field(resolver: "User@newUserReword")
  bindDongdezhuan(account:String!,password:String!):Boolean @field(resolver: "User@bindDongdezhuan")
}

enum RewardType{
  DOUYIN@enum(value:"douyin")
  VIDEO@enum(value:"newUser")
}

# test
extend type Mutation {
  blockUser(user_id: Int!): blockInfo
    @field(resolver: "App\\User@removeBlockUser")
  updateUserInfo(id: Int @eq, input: updateUserInfo! @spread): User!
    @field(resolver: "App\\User@updateUserInfo")
}

input updateUserInfo {
  name: String
  age: Int
  gender: String
  email: String
  phone: String
  introduction: String
  password: String @bcrypt
  avatar: String
  birthday: String
}
