type Invitation {
  id: ID!
  user: User
  beInviter: User
  created_at: DateTime
  invited_in: DateTime
  title: String @field(resolver: "App\\Invitation@resolveTitle")
  """
  CEO看厂长的总贡献
  """
  total_contribute: Int!
}

type UserInvitation {
  id: ID!
  invitation_reward_gold: Int
    @field(resolver: "App\\UserInvitation@resolveInvitationRewardGold")
  user: User
  firends_total_contribute: Int
  success_firends_count: Int
  firends_count: Int
  today_income: Float
  pre_reward_amount: Float
  invite_code: String
  invite_slogan: String
  invite_url: String
  rate: Float
  next_increment: InvitationNextIncrement
  phase: InvitationPhase
  wallet: Wallet
  redPacket: RedPacket @field(resolver: "App\\UserInvitation@resolveRedPacket")
}

type RedPacket {
  phase_amount: Float
  balance: String
  progress: Float
  difference_amount: String
  red_packet_invites_count: Int
}

type InvitationPhase {
  id: ID!
  amount: Float
  rate: Float
}

type InvitationNextIncrement {
  next_increment_at: DateTime
  next_increment_at_timestamp: Int
}

input InvitationFilters {
  invited_in: String
}

extend type Query {
  invitations(
    user_id: Int! @eq
    orderBy: [OrderByClause!] @orderBy
    filters: InvitationFilters
  ): Invitation
    @paginate(
      defaultCount: 10
      builder: "App\\Invitation@resolveInvitations"
      scopes: ["filters"]
    )
  myInviter(user_id: Int! @eq): User
    @field(resolver: "App\\Invitation@resolveMyInviter")
  userInvitation(user_id: Int @eq): UserInvitation
    @field(resolver: "App\\UserInvitation@resolveUserInvitation")
  secondaryInvitations(user_id: ID! @eq, limit: Int = 10): [Invitation]
    @field(resolver: "App\\Invitation@resolveSecondaryInvitations")
  myInvitations(limit: Int = 18): [Invitation]
    @field(resolver: "App\\Invitation@resolveMyInvitations")
}
